import pyroomacoustics as pra
import numpy as np
from scipy.io import wavfile
from preprocessing import create_observations
import os
import math

# Training rooms dimensions
ROOMS = {
    'small' : np.array([4, 4, 3]),
    'medium' : np.array([6, 6, 3]),
    'large' : np.array([8, 8, 3])
}

# Testing rooms dimensions
TEST_ROOMS = {
    'small' : np.array([5, 5, 2]),
    'medium' : np.array([7, 7, 2]),
    'large' : np.array([9, 9, 2])
}

AUDIO_PATH = '../training_data/audio'


def get_music_prediction(X, mic_pos=[2, 2, 1], resolution=20, fs=16000, nfft=256):
    """
    Calculates DOA based on MUSIC prediction.
    Returns:
        an angle in degrees in range 0-360 with resolution of 20
    """
    
    # Declare microphone array position
    mic_center = mic_pos[:2]
    mic_height = mic_pos[-1]
    
    # Radius constant, will always be the same for MiniDSP array
    mic_radius = 0.045

    # Generate the microphone array
    R = pra.circular_2D_array(center=mic_center, M=6, phi0=0, radius=mic_radius)
    
    # Run MUSIC algorithm for DOA
    doa = pra.doa.MUSIC(R, fs, nfft, n_grid=360//resolution)
    doa.locate_sources(X)
    return round((doa.azimuth_recon[0] * 180 / math.pi))


def get_all_predictions(is_info=False, samples=20, step=5, resolution=20):
    """
    Returns a list of labels predicted by applying MUSIC.
    Observations are generated by taking every 10th observation
    from the entire data set (all audio files).
    
    Observation is a matrix of size (samples, channels), where
    channels is the number of microphones (6).
    """
    
    y_true = []
    y_pred = []
    info = []
    
    files = [file for file in os.listdir(os.path.join(AUDIO_PATH, 'horizontal')) if 'test' in file]
    
    # Loop through all WAVs
    for i, file in enumerate(files):
        if file[-3:] != 'wav': 
            continue

        path = os.path.join(AUDIO_PATH, 'horizontal', file)
        fs, wav_signals = wavfile.read(path)
        label = int(file.split('_')[2])
        
        # Create observations from a given WAV file
        X, y = create_observations(wav_signals, fs, label, samples, step, resolution, True)

        dist = int(file.split('_')[4])
        room = file.split('_')[6]
        y = [(dist, room, label) for label in y]
           
        # Store actual and predicted labels
        y_true.extend(y)
        preds = [get_music_prediction(x, resolution=resolution, fs=fs) for x in X]
        y_pred.extend(preds)
        
        print(f'File {i+1}/{len(files)}', end='\r')
       
    y_true = np.array(y_true)
    
    info = y_true[:, :-1]
    y_true = list(y_true[:, -1].astype(int))
    return y_true, y_pred, info